{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["View","_ref","data","name","description","thumbnail","homepage","wiki","style","_jsxs","className","children","_jsx","src","objectFit","concat","alt","href","RandomChar","char","setChar","useState","getACharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","refs","useRef","focusOnItem","index","current","forEach","element","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","itemsList","includes","push","CSSTransition","timeout","classNames","tabIndex","onCharSelected","onKeyDown","e","key","preventDefault","ref","TransitionGroup","component","createCharList","disabled","comics","_Fragment","map","item","i","CharInfo","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","this","setState","render","CharSearchForm","getACharacterByName","errorMessage","result","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","loadChar","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","setSelectedChar","Helmet","content","decoration"],"mappings":"8NAAe,G,MAAA,IAA0B,qC,OCQzC,MA4CMA,EAAOC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,KAAEE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,GAASL,EAEzD,IAAIM,EAAQ,CAAC,UAAc,SAK3B,MAJkB,wEAAdH,IACAG,EAAQ,CAAC,UAAc,YAIvBC,eAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAC9BC,cAAA,OAAKC,IAAKR,EAAWG,MAAO,CAAEM,UAAU,GAADC,OAAKP,IAAWQ,IAAI,mBAAmBN,UAAU,oBACxFD,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC7BC,cAAA,KAAGF,UAAU,mBAAkBC,SAAER,IACjCS,cAAA,KAAGF,UAAU,oBAAmBC,SAC3BP,IAELK,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC7BC,cAAA,KAAGK,KAAMX,EAAUI,UAAU,sBAAqBC,SAC9CC,cAAA,OAAKF,UAAU,QAAOC,SAAC,eAE3BC,cAAA,KAAGK,KAAMV,EAAMG,UAAU,2BAA0BC,SAC/CC,cAAA,OAAKF,UAAU,QAAOC,SAAC,mBAIjC,EAICO,MAzEIA,KAEf,MAAOC,EAAMC,GAAWC,mBAAS,CAAC,IAC5B,cAAEC,EAAa,WAAEC,EAAU,QAAEC,EAAO,WAAEC,GAAeC,cAE3DC,qBAAU,KACNC,GAAY,GAEb,IAEH,MAAMC,EAAgBV,IAClBC,EAAQD,EAAK,EAGXS,EAAaA,KAEfL,IACA,MAAMO,EAAKC,KAAKC,MAAmB,KAAbD,KAAKE,SAAkC,SAE7DX,EAAcQ,GACTI,KAAKL,GACLK,MAAK,IAAMT,EAAW,cAAa,EAG5C,OACIhB,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBwB,YAAWX,EAASxB,EAAMmB,GAC3BV,eAAA,OAAKC,UAAU,qBAAoBC,SAAA,CAC/BF,eAAA,KAAGC,UAAU,oBAAmBC,SAAA,CAAC,8BACFC,cAAA,SAAK,4CAGpCA,cAAA,KAAGF,UAAU,oBAAmBC,SAAC,0BAGjCC,cAAA,UAAQwB,QAASR,EAAYlB,UAAU,sBAAqBC,SACxDC,cAAA,OAAKF,UAAU,QAAOC,SAAC,aAE3BC,cAAA,OAAKC,IAAKwB,EAASrB,IAAI,UAAUN,UAAU,gCAE7C,E,oCCgFC4B,MAvGGC,IAEd,MAAOC,EAAUC,GAAepB,mBAAS,KAClCqB,EAAgBC,GAAqBtB,oBAAS,IAC9CuB,EAAQC,GAAaxB,mBAAS,MAC9ByB,EAAWC,GAAgB1B,oBAAS,IAErC,iBAAE2B,EAAgB,QAAExB,EAAO,WAAEC,GAAeC,cAElDC,qBAAU,KACNsB,EAAUL,GAAQ,EAAK,GAExB,IAEH,MAAMK,EAAYA,CAACL,EAAQM,KACbP,GAAVO,GACAF,EAAiBJ,GACZV,KAAKiB,GACLjB,MAAK,IAAMT,EAAW,cAAa,EAGtC0B,EAAoBC,IACtB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACrBD,GAAQ,GAGZZ,GAAYD,GAAY,IAAIA,KAAaY,KACzCT,GAAkB,GAClBE,GAAUD,GAAUA,EAAS,IAC7BG,EAAaM,EAAM,EAGjBE,EAAOC,iBAAO,IAEdC,EAAeC,IACjBH,EAAKI,QAAQC,SAAQC,GAAWA,EAAQC,UAAUC,OAAO,yBACzDR,EAAKI,QAAQD,GAAOI,UAAUE,IAAI,uBAClCT,EAAKI,QAAQD,GAAOO,OAAO,EA0C/B,MAAMC,EAAWC,mBAAQ,IA/FVhC,EAACX,EAAS4C,EAAW1B,KACpC,OAAQlB,GACJ,IAAK,UACD,OAAOZ,cAACyD,IAAO,IACnB,IAAK,UACD,OAAO3B,EAAiB9B,cAACwD,EAAS,IAAMxD,cAACyD,IAAO,IACpD,IAAK,YACD,OAAOzD,cAACwD,EAAS,IACrB,IAAK,QACD,OAAOxD,cAAC0D,IAAY,IACxB,QACI,MAAM,IAAIC,MAAM,4BACxB,EAoFWpC,CAAWX,GAAS,IAxC/B,SAAwBgB,GACpB,MAAMgC,EAAY,GA6BlB,OA3BAhC,EAASoB,SAAQ,CAAA3D,EAA0ByD,KAAW,IAApC,UAAErD,EAAS,KAAEF,EAAI,GAAE2B,GAAI7B,EACrC,MAAMO,EAAQH,EAAUoE,SAAS,uBAAyB,QAAU,QAEpED,EAAUE,KACN9D,cAAC+D,IAAa,CAACC,QAAS,IAAKC,WAAW,aAAYlE,SAChDF,eAAA,MACIqE,SAAU,EACVpE,UAAU,aACV0B,QAASA,KACLG,EAAMwC,eAAejD,GACrB2B,EAAYC,EAAM,EAEtBsB,UAAWC,IACO,UAAVA,EAAEC,MACFD,EAAEE,iBACF5C,EAAMwC,eAAejD,GACrB2B,EAAYC,GAChB,EAEJ0B,IAAKvB,GAAWN,EAAKI,QAAQD,GAASG,EAAQlD,SAAA,CAC1CC,cAAA,OAAKC,IAAKR,EAAWG,MAAQ,CAACM,UAAU,GAADC,OAAKP,IAAWQ,IAAKb,IAC5DS,cAAA,OAAKF,UAAU,aAAYC,SAAER,MAhB5B2B,KAmBhB,IAIDlB,cAAA,MAAIF,UAAU,aAAYC,SACtBC,cAACyE,IAAe,CAACC,UAAW,KAAK3E,SAC5B6D,KAIjB,CAGqCe,CAAe/C,IAAWE,IAE5D,CAAClB,IAEJ,OACIf,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACtBuD,EACDtD,cAAA,UACIF,UAAU,mCACV8E,SAAU9C,EACVlC,MAAO,CAAE,QAAWsC,EAAY,OAAS,SACzCV,QAASA,IAAMa,EAAUL,GAAQjC,SACjCC,cAAA,OAAKF,UAAU,QAAOC,SAAC,kBAEzB,E,MChHd,MAiCMX,EAAOC,IAAe,IAAd,KAAEC,GAAMD,EAClB,MAAM,KAAEE,EAAI,YAAEC,EAAW,UAAEC,EAAS,SAAEC,EAAQ,KAAEC,EAAI,OAAEkF,GAAWvF,EAE3DM,EAAQH,EAAUoE,SAAS,uBAAyB,UAAY,QAEtE,OACIhE,eAAAiF,WAAA,CAAA/E,SAAA,CACIF,eAAA,OAAKC,UAAU,eAAcC,SAAA,CACzBC,cAAA,OAAKC,IAAKR,EAAWG,MAAO,CAAEM,UAAU,GAADC,OAAKP,IAAWQ,IAAKb,IAC5DM,eAAA,OAAAE,SAAA,CACIC,cAAA,OAAKF,UAAU,kBAAiBC,SAAER,IAClCM,eAAA,OAAKC,UAAU,aAAYC,SAAA,CACvBC,cAAA,KAAGK,KAAMX,EAAUI,UAAU,sBAAqBC,SAC9CC,cAAA,OAAKF,UAAU,QAAOC,SAAC,eAE3BC,cAAA,KAAGK,KAAMV,EAAMG,UAAU,2BAA0BC,SAC/CC,cAAA,OAAKF,UAAU,QAAOC,SAAC,oBAKvCC,cAAA,OAAKF,UAAU,cAAaC,SACvBP,IAELQ,cAAA,OAAKF,UAAU,eAAcC,SAAC,YAC9BC,cAAA,MAAIF,UAAU,oBAAmBC,SAEP,IAAlB8E,EAAOnC,OAAe,mDAClBmC,EAAOE,KAAI,CAACC,EAAMC,KAEd,KAAIA,GAAK,IACT,OACIjF,cAAA,MACIF,UAAU,oBAAmBC,SACxBiF,EAAKzF,MAFL0F,EAGJ,QAM1B,EAQIC,MAlFGvD,IAEd,MAAOpB,EAAMC,GAAWC,mBAAS,OAE3B,cAAEC,EAAa,WAAEC,EAAU,QAAEC,EAAO,WAAEC,GAAeC,cAE3DC,qBAAU,KACNC,GAAY,GAEb,CAACW,EAAMT,KAEV,MAAMF,EAAaA,KACf,MAAM,GAAEE,GAAOS,EAEVT,IAELP,IACAD,EAAcQ,GACTI,KAAKL,GACLK,MAAK,IAAMT,EAAW,eAAa,EAGtCI,EAAgBV,IAClBC,EAAQD,EAAK,EAGjB,OACIP,cAAA,OAAKF,UAAU,aAAYC,SACtBwB,YAAWX,EAASxB,EAAMmB,IACzB,ECjCd,MAAM4E,UAAsB3B,YAAU4B,cAAA,SAAAC,WAAA,KAElCC,MAAQ,CACJC,OAAO,EACV,CAEDC,kBAAkBD,EAAOE,GACrBC,KAAKC,SAAS,CACVJ,OAAO,GAEf,CAEAK,SACI,OAAIF,KAAKJ,MAAMC,MACJvF,cAAC0D,IAAY,IAGjBgC,KAAK/D,MAAM5B,QACtB,EAGWoF,Q,6BCoDAU,MAnEQA,KACnB,MAAOtF,EAAMC,GAAWC,mBAAS,OAE3B,oBAAEqF,EAAmB,WAAEnF,EAAU,QAAEC,EAAO,WAAEC,GAAeC,cAE3DG,EAAgBV,IAClBC,EAAQD,EAAK,EAUXwF,EAA2B,UAAZnF,EAAsBZ,cAAA,OAAKF,UAAU,8BAA6BC,SAACC,cAAC0D,IAAY,MAAY,KAC3GsC,EAAUzF,EAAcA,EAAKmC,OAAS,EACxC7C,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CACjCF,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CAAC,mBAAiBQ,EAAK,GAAGhB,KAAK,YACpES,cAACiG,IAAI,CAACC,GAAE,eAAA/F,OAAiBI,EAAK,GAAGW,IAAMpB,UAAU,2BAA0BC,SACvEC,cAAA,OAAKF,UAAU,QAAOC,SAAC,iBAG/BC,cAAA,OAAKF,UAAU,qBAAoBC,SAAC,8DAPjB,KAWvB,OACIF,eAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAC9BC,cAACmG,IAAM,CACHC,cAAe,CACXC,SAAU,IAEdC,iBAAkBC,IAAW,CACzBF,SAAUE,MACDC,SAAS,4BAEtBC,SAAUpH,IAAA,IAAC,SAAEgH,GAAUhH,EAAA,MA7BjBgH,KACd1F,IACAmF,EAAoBO,GACf/E,KAAKL,GACLK,MAAK,IAAMT,EAAW,cAAa,EAyBJ6F,CAASL,EAAS,EAACtG,SAE/CF,eAAC8G,IAAI,CAAA5G,SAAA,CACDC,cAAA,SAAOF,UAAU,qBACb8G,QAAQ,YAAW7G,SAAC,iCAGxBF,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CACjCC,cAAC6G,IAAK,CACF3F,GAAG,WACH3B,KAAK,WACLuH,KAAK,OACLC,YAAY,eAChB/G,cAAA,UACI8G,KAAK,SACLhH,UAAU,sBACV8E,SAAsB,YAAZhE,EAAsBb,SAC5BC,cAAA,OAAKF,UAAU,QAAOC,SAAC,cAGnCC,cAACgH,IAAkB,CAAClH,UAAU,qBAAqBP,KAAK,WAAWmF,UAAU,aAGpFsB,EACAD,IACC,ECzEC,MAA0B,mCCiD1BkB,UAtCEA,KAEb,MAAOC,EAAcC,GAAmB1G,mBAAS,MAMjD,OACIZ,eAAAiF,WAAA,CAAA/E,SAAA,CACIF,eAACuH,IAAM,CAAArH,SAAA,CACHC,cAAA,QACIT,KAAK,cACL8H,QAAQ,8BAEZrH,cAAA,SAAAD,SAAO,iCAEXC,cAACmF,EAAa,CAAApF,SACVC,cAACM,EAAU,MAEfT,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC1BC,cAACmF,EAAa,CAAApF,SACVC,cAAC0B,EAAQ,CAACyC,eAlBFjD,IACpBiG,EAAgBjG,EAAG,MAmBXrB,eAAA,OAAAE,SAAA,CACIC,cAACmF,EAAa,CAAApF,SACVC,cAACkF,EAAQ,CAAChE,GAAIgG,MAElBlH,cAACmF,EAAa,CAAApF,SACVC,cAAC6F,EAAc,YAI3B7F,cAAA,OAAKF,UAAU,gBAAgBG,IAAKqH,EAAYlH,IAAI,aACrD,C","file":"static/js/5.d4396ef3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n    const { getACharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        // const id = Math.floor(Math.random() * (1017858 - 1009144) + 1009144);\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011355  - 1009144) + 1009144);\r\n\r\n        getACharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button onClick={updateChar} className=\"button button__main\">\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = data;\r\n\r\n    let style = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        style = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} style={{ objectFit: `${style}` }} alt=\"Random character\" className=\"randomchar__img\"/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;\r\n","import { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting' :\r\n            return <Spinner />;\r\n        case 'loading' :\r\n            return newItemLoading ? <Component /> : <Spinner />;\r\n        case 'confirmed' :\r\n            return <Component />;\r\n        case 'error' :\r\n            return <ErrorMessage />;\r\n        default :\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    const refs = useRef([]);\r\n\r\n    const focusOnItem = (index) => {\r\n        refs.current.forEach(element => element.classList.remove('char__item_selected'));\r\n        refs.current[index].classList.add('char__item_selected');\r\n        refs.current[index].focus();\r\n    }\r\n\r\n    function createCharList(charList) {\r\n        const itemsList = [];\r\n\r\n        charList.forEach(({ thumbnail, name, id }, index) => {\r\n            const style = thumbnail.includes('image_not_available') ? 'unset' : 'cover';\r\n\r\n            itemsList.push(\r\n                <CSSTransition timeout={200} classNames='char__item'>\r\n                    <li key={id}\r\n                        tabIndex={0}\r\n                        className=\"char__item\"\r\n                        onClick={() => {\r\n                            props.onCharSelected(id);\r\n                            focusOnItem(index);\r\n                        }}\r\n                        onKeyDown={e => {\r\n                            if (e.key === 'Enter') {\r\n                                e.preventDefault();\r\n                                props.onCharSelected(id);\r\n                                focusOnItem(index);\r\n                            }\r\n                        }}\r\n                        ref={element => refs.current[index] = element}>\r\n                            <img src={thumbnail} style={ {objectFit: `${style}`} } alt={name}/>\r\n                            <div className=\"char__name\">{name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {itemsList}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => createCharList(charList), newItemLoading)\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [process]);\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {elements}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{ 'display': charEnded ? 'none' : 'block' }}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { getACharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [props.id]);\r\n\r\n    const updateChar = () => {\r\n        const { id } = props;\r\n\r\n        if (!id) return;\r\n\r\n        clearError();\r\n        getACharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({ data }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\r\n\r\n    const style = thumbnail.includes('image_not_available') ? 'contain' : 'cover';\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} style={{ objectFit: `${style}` }} alt={name}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {\r\n                    comics.length === 0 ? 'There are no comics that contain this character.' :\r\n                        comics.map((item, i) => {\r\n                            // eslint-disable-next-line array-callback-return\r\n                            if (i >= 10) return;\r\n                            return (\r\n                                <li key={i}\r\n                                    className=\"char__comics-item\">\r\n                                        {item.name}\r\n                                </li>\r\n                            )\r\n                        })\r\n                }\r\n                \r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    id: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;\r\n","import { Component } from \"react\";\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    \r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport { Link } from \"react-router-dom\";\r\nimport * as Yup from 'yup';\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { getACharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const loadChar = (charName) => {\r\n        clearError();\r\n        getACharacterByName(charName)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const result = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> : \r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string()\r\n                            .required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => loadChar(charName)}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\"\r\n                        htmlFor=\"className\">\r\n                            Or find a character by name:\r\n                    </label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name=\"charName\"\r\n                            type=\"text\"\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                                <div className=\"inner\">Find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage className=\"char__search-error\" name=\"charName\" component=\"div\" />\r\n                </Form>\r\n            </Formik>\r\n            {result}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setSelectedChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo id={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n"],"sourceRoot":""}